// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc.proto

/*
Package rpc is a generated protocol buffer package.

It is generated from these files:
	rpc.proto

It has these top-level messages:
	FilesystemVersion
	Filesystem
	HeloRequest
	HeloReply
	FilesystemsRequest
	FilesystemsReply
	FilesystemVersionsRequest
	FilesystemVersionsReply
	TransferRequest
	TransferReply
*/
package rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type FilesystemVersion struct {
	Type      string                     `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	Name      string                     `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Guid      uint64                     `protobuf:"fixed64,3,opt,name=guid" json:"guid,omitempty"`
	CreateTxg uint64                     `protobuf:"fixed64,4,opt,name=create_txg,json=createTxg" json:"create_txg,omitempty"`
	Creation  *google_protobuf.Timestamp `protobuf:"bytes,5,opt,name=creation" json:"creation,omitempty"`
}

func (m *FilesystemVersion) Reset()                    { *m = FilesystemVersion{} }
func (m *FilesystemVersion) String() string            { return proto.CompactTextString(m) }
func (*FilesystemVersion) ProtoMessage()               {}
func (*FilesystemVersion) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *FilesystemVersion) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *FilesystemVersion) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FilesystemVersion) GetGuid() uint64 {
	if m != nil {
		return m.Guid
	}
	return 0
}

func (m *FilesystemVersion) GetCreateTxg() uint64 {
	if m != nil {
		return m.CreateTxg
	}
	return 0
}

func (m *FilesystemVersion) GetCreation() *google_protobuf.Timestamp {
	if m != nil {
		return m.Creation
	}
	return nil
}

type Filesystem struct {
	Path string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
}

func (m *Filesystem) Reset()                    { *m = Filesystem{} }
func (m *Filesystem) String() string            { return proto.CompactTextString(m) }
func (*Filesystem) ProtoMessage()               {}
func (*Filesystem) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Filesystem) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

// HELO
type HeloRequest struct {
	ProtocolVersion int32 `protobuf:"varint,1,opt,name=protocol_version,json=protocolVersion" json:"protocol_version,omitempty"`
}

func (m *HeloRequest) Reset()                    { *m = HeloRequest{} }
func (m *HeloRequest) String() string            { return proto.CompactTextString(m) }
func (*HeloRequest) ProtoMessage()               {}
func (*HeloRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *HeloRequest) GetProtocolVersion() int32 {
	if m != nil {
		return m.ProtocolVersion
	}
	return 0
}

type HeloReply struct {
	Ok bool `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
}

func (m *HeloReply) Reset()                    { *m = HeloReply{} }
func (m *HeloReply) String() string            { return proto.CompactTextString(m) }
func (*HeloReply) ProtoMessage()               {}
func (*HeloReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *HeloReply) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

// FILESYSTEM REQUEST
type FilesystemsRequest struct {
}

func (m *FilesystemsRequest) Reset()                    { *m = FilesystemsRequest{} }
func (m *FilesystemsRequest) String() string            { return proto.CompactTextString(m) }
func (*FilesystemsRequest) ProtoMessage()               {}
func (*FilesystemsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type FilesystemsReply struct {
	Filesystems []*Filesystem `protobuf:"bytes,1,rep,name=filesystems" json:"filesystems,omitempty"`
}

func (m *FilesystemsReply) Reset()                    { *m = FilesystemsReply{} }
func (m *FilesystemsReply) String() string            { return proto.CompactTextString(m) }
func (*FilesystemsReply) ProtoMessage()               {}
func (*FilesystemsReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *FilesystemsReply) GetFilesystems() []*Filesystem {
	if m != nil {
		return m.Filesystems
	}
	return nil
}

// FILESYSTEM VERSION REQUEST
type FilesystemVersionsRequest struct {
	Path string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
}

func (m *FilesystemVersionsRequest) Reset()                    { *m = FilesystemVersionsRequest{} }
func (m *FilesystemVersionsRequest) String() string            { return proto.CompactTextString(m) }
func (*FilesystemVersionsRequest) ProtoMessage()               {}
func (*FilesystemVersionsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *FilesystemVersionsRequest) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

type FilesystemVersionsReply struct {
	Versions []*FilesystemVersion `protobuf:"bytes,1,rep,name=versions" json:"versions,omitempty"`
}

func (m *FilesystemVersionsReply) Reset()                    { *m = FilesystemVersionsReply{} }
func (m *FilesystemVersionsReply) String() string            { return proto.CompactTextString(m) }
func (*FilesystemVersionsReply) ProtoMessage()               {}
func (*FilesystemVersionsReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *FilesystemVersionsReply) GetVersions() []*FilesystemVersion {
	if m != nil {
		return m.Versions
	}
	return nil
}

// TRANSFER
type TransferRequest struct {
	FilesystemPath string `protobuf:"bytes,1,opt,name=filesystem_path,json=filesystemPath" json:"filesystem_path,omitempty"`
	// Types that are valid to be assigned to Transfer:
	//	*TransferRequest_Increment_
	//	*TransferRequest_Resume_
	//	*TransferRequest_Initial_
	Transfer isTransferRequest_Transfer `protobuf_oneof:"Transfer"`
}

func (m *TransferRequest) Reset()                    { *m = TransferRequest{} }
func (m *TransferRequest) String() string            { return proto.CompactTextString(m) }
func (*TransferRequest) ProtoMessage()               {}
func (*TransferRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type isTransferRequest_Transfer interface {
	isTransferRequest_Transfer()
}

type TransferRequest_Increment_ struct {
	Increment *TransferRequest_Increment `protobuf:"bytes,2,opt,name=increment,oneof"`
}
type TransferRequest_Resume_ struct {
	Resume *TransferRequest_Resume `protobuf:"bytes,3,opt,name=resume,oneof"`
}
type TransferRequest_Initial_ struct {
	Initial *TransferRequest_Initial `protobuf:"bytes,4,opt,name=initial,oneof"`
}

func (*TransferRequest_Increment_) isTransferRequest_Transfer() {}
func (*TransferRequest_Resume_) isTransferRequest_Transfer()    {}
func (*TransferRequest_Initial_) isTransferRequest_Transfer()   {}

func (m *TransferRequest) GetTransfer() isTransferRequest_Transfer {
	if m != nil {
		return m.Transfer
	}
	return nil
}

func (m *TransferRequest) GetFilesystemPath() string {
	if m != nil {
		return m.FilesystemPath
	}
	return ""
}

func (m *TransferRequest) GetIncrement() *TransferRequest_Increment {
	if x, ok := m.GetTransfer().(*TransferRequest_Increment_); ok {
		return x.Increment
	}
	return nil
}

func (m *TransferRequest) GetResume() *TransferRequest_Resume {
	if x, ok := m.GetTransfer().(*TransferRequest_Resume_); ok {
		return x.Resume
	}
	return nil
}

func (m *TransferRequest) GetInitial() *TransferRequest_Initial {
	if x, ok := m.GetTransfer().(*TransferRequest_Initial_); ok {
		return x.Initial
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*TransferRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _TransferRequest_OneofMarshaler, _TransferRequest_OneofUnmarshaler, _TransferRequest_OneofSizer, []interface{}{
		(*TransferRequest_Increment_)(nil),
		(*TransferRequest_Resume_)(nil),
		(*TransferRequest_Initial_)(nil),
	}
}

func _TransferRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*TransferRequest)
	// Transfer
	switch x := m.Transfer.(type) {
	case *TransferRequest_Increment_:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Increment); err != nil {
			return err
		}
	case *TransferRequest_Resume_:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Resume); err != nil {
			return err
		}
	case *TransferRequest_Initial_:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Initial); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("TransferRequest.Transfer has unexpected type %T", x)
	}
	return nil
}

func _TransferRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*TransferRequest)
	switch tag {
	case 2: // Transfer.increment
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TransferRequest_Increment)
		err := b.DecodeMessage(msg)
		m.Transfer = &TransferRequest_Increment_{msg}
		return true, err
	case 3: // Transfer.resume
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TransferRequest_Resume)
		err := b.DecodeMessage(msg)
		m.Transfer = &TransferRequest_Resume_{msg}
		return true, err
	case 4: // Transfer.initial
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TransferRequest_Initial)
		err := b.DecodeMessage(msg)
		m.Transfer = &TransferRequest_Initial_{msg}
		return true, err
	default:
		return false, nil
	}
}

func _TransferRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*TransferRequest)
	// Transfer
	switch x := m.Transfer.(type) {
	case *TransferRequest_Increment_:
		s := proto.Size(x.Increment)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TransferRequest_Resume_:
		s := proto.Size(x.Resume)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TransferRequest_Initial_:
		s := proto.Size(x.Initial)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type TransferRequest_Increment struct {
	From *FilesystemVersion `protobuf:"bytes,1,opt,name=from" json:"from,omitempty"`
	To   *FilesystemVersion `protobuf:"bytes,2,opt,name=to" json:"to,omitempty"`
}

func (m *TransferRequest_Increment) Reset()                    { *m = TransferRequest_Increment{} }
func (m *TransferRequest_Increment) String() string            { return proto.CompactTextString(m) }
func (*TransferRequest_Increment) ProtoMessage()               {}
func (*TransferRequest_Increment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8, 0} }

func (m *TransferRequest_Increment) GetFrom() *FilesystemVersion {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *TransferRequest_Increment) GetTo() *FilesystemVersion {
	if m != nil {
		return m.To
	}
	return nil
}

type TransferRequest_Initial struct {
	Version *FilesystemVersion `protobuf:"bytes,1,opt,name=version" json:"version,omitempty"`
}

func (m *TransferRequest_Initial) Reset()                    { *m = TransferRequest_Initial{} }
func (m *TransferRequest_Initial) String() string            { return proto.CompactTextString(m) }
func (*TransferRequest_Initial) ProtoMessage()               {}
func (*TransferRequest_Initial) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8, 1} }

func (m *TransferRequest_Initial) GetVersion() *FilesystemVersion {
	if m != nil {
		return m.Version
	}
	return nil
}

type TransferRequest_Resume struct {
	ReceiveResumeToken string `protobuf:"bytes,1,opt,name=receive_resume_token,json=receiveResumeToken" json:"receive_resume_token,omitempty"`
}

func (m *TransferRequest_Resume) Reset()                    { *m = TransferRequest_Resume{} }
func (m *TransferRequest_Resume) String() string            { return proto.CompactTextString(m) }
func (*TransferRequest_Resume) ProtoMessage()               {}
func (*TransferRequest_Resume) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8, 2} }

func (m *TransferRequest_Resume) GetReceiveResumeToken() string {
	if m != nil {
		return m.ReceiveResumeToken
	}
	return ""
}

type TransferReply struct {
	Header *TransferReply_Header `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Chunk  *TransferReply_Chunk  `protobuf:"bytes,2,opt,name=chunk" json:"chunk,omitempty"`
}

func (m *TransferReply) Reset()                    { *m = TransferReply{} }
func (m *TransferReply) String() string            { return proto.CompactTextString(m) }
func (*TransferReply) ProtoMessage()               {}
func (*TransferReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *TransferReply) GetHeader() *TransferReply_Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *TransferReply) GetChunk() *TransferReply_Chunk {
	if m != nil {
		return m.Chunk
	}
	return nil
}

type TransferReply_Header struct {
	Ok bool `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
}

func (m *TransferReply_Header) Reset()                    { *m = TransferReply_Header{} }
func (m *TransferReply_Header) String() string            { return proto.CompactTextString(m) }
func (*TransferReply_Header) ProtoMessage()               {}
func (*TransferReply_Header) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9, 0} }

func (m *TransferReply_Header) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

type TransferReply_Chunk struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *TransferReply_Chunk) Reset()                    { *m = TransferReply_Chunk{} }
func (m *TransferReply_Chunk) String() string            { return proto.CompactTextString(m) }
func (*TransferReply_Chunk) ProtoMessage()               {}
func (*TransferReply_Chunk) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9, 1} }

func (m *TransferReply_Chunk) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*FilesystemVersion)(nil), "rpc.FilesystemVersion")
	proto.RegisterType((*Filesystem)(nil), "rpc.Filesystem")
	proto.RegisterType((*HeloRequest)(nil), "rpc.HeloRequest")
	proto.RegisterType((*HeloReply)(nil), "rpc.HeloReply")
	proto.RegisterType((*FilesystemsRequest)(nil), "rpc.FilesystemsRequest")
	proto.RegisterType((*FilesystemsReply)(nil), "rpc.FilesystemsReply")
	proto.RegisterType((*FilesystemVersionsRequest)(nil), "rpc.FilesystemVersionsRequest")
	proto.RegisterType((*FilesystemVersionsReply)(nil), "rpc.FilesystemVersionsReply")
	proto.RegisterType((*TransferRequest)(nil), "rpc.TransferRequest")
	proto.RegisterType((*TransferRequest_Increment)(nil), "rpc.TransferRequest.Increment")
	proto.RegisterType((*TransferRequest_Initial)(nil), "rpc.TransferRequest.Initial")
	proto.RegisterType((*TransferRequest_Resume)(nil), "rpc.TransferRequest.Resume")
	proto.RegisterType((*TransferReply)(nil), "rpc.TransferReply")
	proto.RegisterType((*TransferReply_Header)(nil), "rpc.TransferReply.Header")
	proto.RegisterType((*TransferReply_Chunk)(nil), "rpc.TransferReply.Chunk")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Zrepl service

type ZreplClient interface {
	Helo(ctx context.Context, in *HeloRequest, opts ...grpc.CallOption) (*HeloReply, error)
	Filesystems(ctx context.Context, in *FilesystemsRequest, opts ...grpc.CallOption) (*FilesystemsReply, error)
	FilesystemVersions(ctx context.Context, in *FilesystemVersionsRequest, opts ...grpc.CallOption) (*FilesystemVersionsReply, error)
	Transfer(ctx context.Context, in *TransferRequest, opts ...grpc.CallOption) (*TransferReply, error)
}

type zreplClient struct {
	cc *grpc.ClientConn
}

func NewZreplClient(cc *grpc.ClientConn) ZreplClient {
	return &zreplClient{cc}
}

func (c *zreplClient) Helo(ctx context.Context, in *HeloRequest, opts ...grpc.CallOption) (*HeloReply, error) {
	out := new(HeloReply)
	err := grpc.Invoke(ctx, "/rpc.Zrepl/Helo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zreplClient) Filesystems(ctx context.Context, in *FilesystemsRequest, opts ...grpc.CallOption) (*FilesystemsReply, error) {
	out := new(FilesystemsReply)
	err := grpc.Invoke(ctx, "/rpc.Zrepl/Filesystems", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zreplClient) FilesystemVersions(ctx context.Context, in *FilesystemVersionsRequest, opts ...grpc.CallOption) (*FilesystemVersionsReply, error) {
	out := new(FilesystemVersionsReply)
	err := grpc.Invoke(ctx, "/rpc.Zrepl/FilesystemVersions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zreplClient) Transfer(ctx context.Context, in *TransferRequest, opts ...grpc.CallOption) (*TransferReply, error) {
	out := new(TransferReply)
	err := grpc.Invoke(ctx, "/rpc.Zrepl/Transfer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Zrepl service

type ZreplServer interface {
	Helo(context.Context, *HeloRequest) (*HeloReply, error)
	Filesystems(context.Context, *FilesystemsRequest) (*FilesystemsReply, error)
	FilesystemVersions(context.Context, *FilesystemVersionsRequest) (*FilesystemVersionsReply, error)
	Transfer(context.Context, *TransferRequest) (*TransferReply, error)
}

func RegisterZreplServer(s *grpc.Server, srv ZreplServer) {
	s.RegisterService(&_Zrepl_serviceDesc, srv)
}

func _Zrepl_Helo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZreplServer).Helo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Zrepl/Helo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZreplServer).Helo(ctx, req.(*HeloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zrepl_Filesystems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilesystemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZreplServer).Filesystems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Zrepl/Filesystems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZreplServer).Filesystems(ctx, req.(*FilesystemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zrepl_FilesystemVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilesystemVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZreplServer).FilesystemVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Zrepl/FilesystemVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZreplServer).FilesystemVersions(ctx, req.(*FilesystemVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zrepl_Transfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZreplServer).Transfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Zrepl/Transfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZreplServer).Transfer(ctx, req.(*TransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Zrepl_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.Zrepl",
	HandlerType: (*ZreplServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Helo",
			Handler:    _Zrepl_Helo_Handler,
		},
		{
			MethodName: "Filesystems",
			Handler:    _Zrepl_Filesystems_Handler,
		},
		{
			MethodName: "FilesystemVersions",
			Handler:    _Zrepl_FilesystemVersions_Handler,
		},
		{
			MethodName: "Transfer",
			Handler:    _Zrepl_Transfer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 641 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x94, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xc7, 0xeb, 0x7c, 0x35, 0x19, 0x43, 0x53, 0x56, 0x85, 0xba, 0x6e, 0x29, 0x91, 0x0f, 0x10,
	0x38, 0xb8, 0xc5, 0x7c, 0xa8, 0x02, 0xc1, 0x01, 0x04, 0x0a, 0x07, 0x24, 0xb4, 0x8a, 0x38, 0x70,
	0x89, 0x5c, 0x77, 0x92, 0x58, 0xb1, 0xbd, 0x66, 0xbd, 0xa9, 0x9a, 0x17, 0x42, 0xe2, 0x71, 0x78,
	0x1d, 0x4e, 0x68, 0xd7, 0xde, 0xd8, 0xa4, 0xce, 0x6d, 0x33, 0xf3, 0x9b, 0x8f, 0xff, 0x78, 0x26,
	0xd0, 0xe3, 0x69, 0xe0, 0xa6, 0x9c, 0x09, 0x46, 0x9a, 0x3c, 0x0d, 0xec, 0x47, 0x33, 0xc6, 0x66,
	0x11, 0x9e, 0x29, 0xd3, 0xe5, 0x72, 0x7a, 0x26, 0xc2, 0x18, 0x33, 0xe1, 0xc7, 0x69, 0x4e, 0x39,
	0xbf, 0x0c, 0xb8, 0xf7, 0x39, 0x8c, 0x30, 0x5b, 0x65, 0x02, 0xe3, 0xef, 0xc8, 0xb3, 0x90, 0x25,
	0x84, 0x40, 0x4b, 0xac, 0x52, 0xb4, 0x8c, 0x81, 0x31, 0xec, 0x51, 0xf5, 0x96, 0xb6, 0xc4, 0x8f,
	0xd1, 0x6a, 0xe4, 0x36, 0xf9, 0x96, 0xb6, 0xd9, 0x32, 0xbc, 0xb2, 0x9a, 0x03, 0x63, 0xd8, 0xa1,
	0xea, 0x4d, 0x1e, 0x02, 0x04, 0x1c, 0x7d, 0x81, 0x13, 0x71, 0x33, 0xb3, 0x5a, 0xca, 0xd3, 0xcb,
	0x2d, 0xe3, 0x9b, 0x19, 0x79, 0x0d, 0x5d, 0xf5, 0x23, 0x64, 0x89, 0xd5, 0x1e, 0x18, 0x43, 0xd3,
	0xb3, 0xdd, 0xbc, 0x49, 0x57, 0x37, 0xe9, 0x8e, 0x75, 0x93, 0x74, 0xcd, 0x3a, 0x03, 0x80, 0xb2,
	0x4f, 0x59, 0x38, 0xf5, 0xc5, 0x5c, 0x37, 0x28, 0xdf, 0xce, 0x05, 0x98, 0x23, 0x8c, 0x18, 0xc5,
	0x9f, 0x4b, 0xcc, 0x04, 0x79, 0x0a, 0xfb, 0x2a, 0x61, 0xc0, 0xa2, 0xc9, 0x75, 0xae, 0x4b, 0xe1,
	0x6d, 0xda, 0xd7, 0xf6, 0x42, 0xae, 0x73, 0x0c, 0xbd, 0x3c, 0x32, 0x8d, 0x56, 0x64, 0x0f, 0x1a,
	0x6c, 0xa1, 0xc8, 0x2e, 0x6d, 0xb0, 0x85, 0x73, 0x00, 0xa4, 0x2c, 0x9c, 0x15, 0xd9, 0x9d, 0x4f,
	0xb0, 0xff, 0x9f, 0x55, 0x46, 0x3e, 0x07, 0x73, 0x5a, 0xda, 0x2c, 0x63, 0xd0, 0x1c, 0x9a, 0x5e,
	0xdf, 0x95, 0x9f, 0xa4, 0x64, 0x69, 0x95, 0x71, 0xce, 0xe0, 0xe8, 0xd6, 0xf4, 0x75, 0x8d, 0x5a,
	0x91, 0x5f, 0xe1, 0xb0, 0x2e, 0x40, 0x96, 0xf7, 0xa0, 0x5b, 0xe8, 0xd4, 0xb5, 0x1f, 0x6c, 0xd4,
	0x2e, 0x78, 0xba, 0xe6, 0x9c, 0x3f, 0x4d, 0xe8, 0x8f, 0xb9, 0x9f, 0x64, 0x53, 0xe4, 0xba, 0xec,
	0x13, 0xe8, 0x97, 0x2d, 0x4e, 0x2a, 0x1d, 0xec, 0x95, 0xe6, 0x6f, 0xbe, 0x98, 0x93, 0xf7, 0xd0,
	0x0b, 0x93, 0x80, 0x63, 0x8c, 0x89, 0x50, 0x6b, 0x61, 0x7a, 0xa7, 0xaa, 0xe2, 0x46, 0x46, 0xf7,
	0x8b, 0xa6, 0x46, 0x3b, 0xb4, 0x0c, 0x21, 0xaf, 0xa0, 0xc3, 0x31, 0x5b, 0xc6, 0xa8, 0xf6, 0xc7,
	0xf4, 0x8e, 0x6b, 0x83, 0xa9, 0x42, 0x46, 0x3b, 0xb4, 0x80, 0xc9, 0x05, 0xec, 0x86, 0x49, 0x28,
	0x42, 0x3f, 0x52, 0xdb, 0x65, 0x7a, 0x27, 0x5b, 0x8a, 0x2a, 0x66, 0xb4, 0x43, 0x35, 0x6e, 0x4f,
	0xa0, 0xb7, 0x6e, 0x85, 0x3c, 0x83, 0xd6, 0x94, 0xb3, 0x58, 0x69, 0xdb, 0x3e, 0x2a, 0xc5, 0x90,
	0xc7, 0xd0, 0x10, 0xac, 0x90, 0xb8, 0x8d, 0x6c, 0x08, 0x66, 0xbf, 0x85, 0xdd, 0xa2, 0x2c, 0x39,
	0x87, 0xdd, 0xea, 0xd6, 0x6d, 0x8f, 0xd3, 0x98, 0xfd, 0x06, 0x3a, 0xb9, 0x56, 0x72, 0x0e, 0x07,
	0x1c, 0x03, 0x0c, 0xaf, 0x71, 0x92, 0x6b, 0x9e, 0x08, 0xb6, 0xc0, 0xa4, 0xf8, 0x0c, 0xa4, 0xf0,
	0xe5, 0xf0, 0x58, 0x7a, 0x3e, 0x00, 0x74, 0xb5, 0x7e, 0xe7, 0xb7, 0x01, 0x77, 0xcb, 0x61, 0xe4,
	0x8b, 0xd9, 0x99, 0xa3, 0x7f, 0x85, 0xbc, 0x68, 0xe5, 0x68, 0x63, 0x60, 0x69, 0xb4, 0x72, 0x47,
	0x0a, 0xa0, 0x05, 0x48, 0x5c, 0x68, 0x07, 0xf3, 0x65, 0xb2, 0x28, 0x44, 0x5b, 0x35, 0x11, 0x1f,
	0xa5, 0x9f, 0xe6, 0x98, 0x6d, 0x41, 0x27, 0xcf, 0xb0, 0x79, 0x3f, 0xf6, 0x31, 0xb4, 0x15, 0x29,
	0xd7, 0xf9, 0xca, 0x17, 0xbe, 0x72, 0xdd, 0xa1, 0xea, 0xed, 0xfd, 0x35, 0xa0, 0xfd, 0x83, 0x63,
	0x1a, 0x91, 0x21, 0xb4, 0xe4, 0x0d, 0x92, 0x7d, 0x55, 0xa9, 0x72, 0xc8, 0xf6, 0x5e, 0xc5, 0x22,
	0xd5, 0xbc, 0x03, 0xb3, 0x72, 0x7a, 0xe4, 0x70, 0x63, 0xae, 0xfa, 0x7c, 0xec, 0xfb, 0xb7, 0x1d,
	0x32, 0x9c, 0x56, 0xef, 0x59, 0x5f, 0x10, 0x39, 0xad, 0xff, 0x3a, 0xeb, 0x64, 0x27, 0x5b, 0xfd,
	0x32, 0xe7, 0xcb, 0x72, 0xfc, 0xe4, 0xa0, 0x6e, 0x1b, 0x6d, 0x72, 0x7b, 0x80, 0x97, 0x1d, 0xf5,
	0x3f, 0xf4, 0xe2, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x46, 0x31, 0xc5, 0x45, 0xb5, 0x05, 0x00,
	0x00,
}
